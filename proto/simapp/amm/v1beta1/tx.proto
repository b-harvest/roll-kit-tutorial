syntax = "proto3";
package simapp.amm.v1beta1;

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/b-harvest/roll-kit-tutorial/x/amm/types";

service Msg {
  option (cosmos.msg.v1.service) = true;
  rpc AddLiquidity(MsgAddLiquidity) returns (MsgAddLiquidityResponse);
  rpc RemoveLiquidity(MsgRemoveLiquidity) returns (MsgRemoveLiquidityResponse);
  rpc SwapExactIn(MsgSwapExactIn) returns (MsgSwapExactInResponse);
}

message MsgAddLiquidity {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated cosmos.base.v1beta1.Coin coins = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message MsgAddLiquidityResponse {
  cosmos.base.v1beta1.Coin minted_share = 1 [ (gogoproto.nullable) = false ];
}

message MsgRemoveLiquidity {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  cosmos.base.v1beta1.Coin share = 2 [ (gogoproto.nullable) = false ];
}

message MsgRemoveLiquidityResponse {
  repeated cosmos.base.v1beta1.Coin withdrawn_coins = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message MsgSwapExactIn {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  cosmos.base.v1beta1.Coin coin_in = 2 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin min_coin_out = 3 [ (gogoproto.nullable) = false ];
}

message MsgSwapExactInResponse {
  cosmos.base.v1beta1.Coin coin_out = 1 [ (gogoproto.nullable) = false ];
}